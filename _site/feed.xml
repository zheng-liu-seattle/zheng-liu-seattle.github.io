<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jasper Up</title>
    <description></description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 31 Dec 2016 01:02:22 -0800</pubDate>
    <lastBuildDate>Sat, 31 Dec 2016 01:02:22 -0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Why I love Swift protocol extension</title>
        <description>&lt;h2 id=&quot;swift-protocol-oriented-programming-language&quot;&gt;Swift 是一个Protocol Oriented Programming Language&lt;/h2&gt;

&lt;p&gt;Swift 从一开始，就强调了这是一个面向protocol的语言，之前一直没有理解，但是当在工作中用到了protocol extension以后，才终于理解了。&lt;/p&gt;

&lt;p&gt;protocol extension解决了面向对象一直没有解决的问题，在单继承的情况下，总有一些子类会继承没有用的方法，举个例子更明白些：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Mammal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Mammal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;breathe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;看上去是正确的OO设计，狗是哺乳动物，因为所有的哺乳动物都可以呼吸，所以狗继承哺乳类，是天经地义的。但是如果这个时候PM跑过来说，我们想要狗能实现’run’这个方法，那应该在哪里实现呢？如果在’Mammal class’实现，那么’whale class’就会有问题，因为鲸鱼是哺乳动物，但是不会跑，那如果在’dog class’实现，那么’cat class’呢？难道也要实现一遍？我们既要遵守DRY(Don’t repeat yourself)的原则，那么多半程序员会实现一个helper class，或者还是写在’Mammal class’里面，只是保证’whale class’不掉用’run()’。&lt;/p&gt;

&lt;p&gt;看上去很搞笑，是不是？但是这是现在OO设计中的一个现实存在的问题，很多程序不得不妥协，让子类继承了很多无用的方法。那么我们接下来看看如果用’protocol extenssion’又该如何优雅的解决呢？&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Mammal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Mammal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;breathe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们可以看到，凡是继承了Runnable借口的class都会有了’run()’这个方法了。&lt;/p&gt;

&lt;h2 id=&quot;the-additional-powers-of-protocol-extensions&quot;&gt;The additional powers of protocol extensions&lt;/h2&gt;

&lt;p&gt;在protocol extension中，可以用一个’where’关键字来告诉，这个protocol extension只能哪个class来继承，并且可以直接调用这个class中的变量和方法，比如&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;running&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Mammal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Doudou&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在上面这个例子里面，’Dog’ 继承了 ‘Runnable’，并且’Runnable’ 制定(where)了自己必须是’Dog’，所以可以直接调用Dog里面的变量。&lt;/p&gt;

&lt;p&gt;但是如果继承这个protocol的类并不在制定(where)内，就会报错，比如下面这个例子。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Mammal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Houhou&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;so-are-there-any-drawbacks&quot;&gt;So are there any drawbacks?&lt;/h2&gt;

&lt;p&gt;一个语言的feature，就算再powerful，也会有一些缺点，protocol extension也不例外，但是只要team里面定义好coding style, should be easy to overcome。&lt;/p&gt;

&lt;p&gt;以下例子：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;running&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Mammal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Doudou&quot;&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I am not running&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;当调用dog.run的时候，会输出’I am not running’，这是为什么呢，因为’Dog’自己也实现了’run()’，和protocol extension的一模一样，那么就override了protocol extension里面的方法了，编译器目前并没有给出任何警告，甚至，如果这个class被extension中，有一样的方法，也会override，这个时候，往往会让人费解。所以养成良好的编程习惯很重要。&lt;/p&gt;

</description>
        <pubDate>Sat, 31 Dec 2016 00:00:00 -0800</pubDate>
        <link>/2016/12/31/swift-protocol-extension/</link>
        <guid isPermaLink="true">/2016/12/31/swift-protocol-extension/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Swagger, silver bullet</title>
        <description>&lt;h2 id=&quot;swagger-is-a-framework-to-help-designdocumentcode-restful-api&quot;&gt;Swagger is a framework to help design/document/code Restful API.&lt;/h2&gt;

&lt;h3 id=&quot;benefits&quot;&gt;Benefits&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;1.Quickly create RESTful APIs&lt;/li&gt;
  &lt;li&gt;2.Client code is auto generated, can be used like a SDK in mobile （Android and iOS)&lt;/li&gt;
  &lt;li&gt;3.Swagger UI is friendly for consumer to understand the API (better documentation)&lt;/li&gt;
  &lt;li&gt;4.Backend team could use Swagger UI to automated/manually test for the API. (like a web version of Postman)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;steps-to-integrate-swagger-generated-sdk-for-mobile-app&quot;&gt;Steps to integrate swagger generated SDK for mobile app.&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;1.Look up the YAML/JSON which describe the RESTful API, you could get it from backend engineer&lt;/li&gt;
  &lt;li&gt;2.Go to http://editor.swagger.io/#/, paste the YAML/JSON to left column&lt;/li&gt;
  &lt;li&gt;3.On the same webpage, click - Generate Client -&amp;gt; Swift/Objective-C/Swift 3 to download the file&lt;/li&gt;
  &lt;li&gt;4.Unzip the file, put them to PAX project root folder, make sure the source code folder and . podspec file are in the same folder (use folder name “SwaggerClient” as example)&lt;/li&gt;
  &lt;li&gt;Edit Podfile, add&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pod &lt;span class=&quot;s2&quot;&gt;&quot;SwaggerClient&quot;&lt;/span&gt;, :path &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; &lt;span class=&quot;s2&quot;&gt;&quot;SwaggerClient/&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Run&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pod install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;5.Verify if it installed successfully
 Check Pods project, you should be able to see DevelopmentPods folder which contains the SwaggerClient.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;steps-to-custimze-the-code&quot;&gt;Steps to custimze the code&lt;/h3&gt;

&lt;p&gt;Swagger Codegen is using &lt;a href=&quot;https://mustache.github.io&quot;&gt;&lt;em&gt;Mustache&lt;/em&gt;&lt;/a&gt; as template to generate code, so to customize the code generated, we don’t need to touch the source code of Swagger Codegen.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1.Install Swagger Codegen 
  Home Brew:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install swagger-codegen
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Or follow the &lt;a href=&quot;https://github.com/swagger-api/swagger-codegen#compatibility&quot;&gt;instruction&lt;/a&gt; to install through build source code (maven), docker&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2.Modify templates&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The templates are located at swagger-codegen/modules/swagger-codegen/src/main/resources, if installed from home brew, you can download them from &lt;a href=&quot;https://github.com/swagger-api/swagger-codegen/tree/master/modules/swagger-codegen/src/main/resources&quot;&gt;here&lt;/a&gt;. After modified the templates, put the templates inside a folder somewhere in the disk.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;3.Generate code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Command for HomeBrew:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;swagger-codegen generate -i &amp;lt;SWAGGER definition&amp;gt; -l ruby -o /tmp/test/ -t &amp;lt;TEMPLATE FOLDER&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Command for source code build:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java -jar modules/swagger-codegen-cli/target/swagger-codegen-cli.jar generate -i &amp;lt;SWAGGER definition&amp;gt; -l swift -o SwaggerClient -t &amp;lt;TEMPLATE FOLDER&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;workflow-with-swagger&quot;&gt;Workflow with Swagger&lt;/h3&gt;

&lt;h4 id=&quot;for-web-service-owner&quot;&gt;For Web Service Owner&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Every time server side changes, generate updated Swagger RESTful API definition file (yml or JSON) . It could be generated automatically&lt;/li&gt;
  &lt;li&gt;Notify mobile team after testing&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;for-web-service-consumer-mobile&quot;&gt;For Web Service Consumer (Mobile)&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Use Swagger UI or command to generate the mobile SDK (iOS or Android), update the SDK in mobile project, run pod install.&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 30 Dec 2016 00:00:00 -0800</pubDate>
        <link>/2016/12/30/swagger/</link>
        <guid isPermaLink="true">/2016/12/30/swagger/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Swift Error Handling</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;抛出异常&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;定义自己的异常，必须继承Error，可以通过自定义参数，传达一些信息&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FetchMoneyError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;insurricientFunds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;moneyNeeded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notMyMoney&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FetchMoneyError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insurricientFunds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;moneyNeeded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FetchMoneyError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notMyMoney&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;handling-errors&quot;&gt;Handling Errors&lt;/h1&gt;

&lt;h2 id=&quot;section-1&quot;&gt;向上传递异常&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;canThrowErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cannotThrowErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;抛出异常的function，叫做 &lt;em&gt;throwing function&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;do-catch&quot;&gt;Do Catch&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;use-optional&quot;&gt;Use Optional&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getMoney&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果getMoney抛出异常，x就是nil&lt;/p&gt;

&lt;h2 id=&quot;use-&quot;&gt;Use !&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try!&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getMoney&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;cleanup-actions&quot;&gt;Cleanup Actions&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;和Java里面的final类似，不管程序怎么样，保证当前scope内最后会被执行。如果定义了多个defer，按照定义的反向顺序执行&lt;/p&gt;

</description>
        <pubDate>Mon, 12 Dec 2016 00:00:00 -0800</pubDate>
        <link>/2016/12/12/swift-error-handling/</link>
        <guid isPermaLink="true">/2016/12/12/swift-error-handling/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>iOS Draw things animation</title>
        <description>&lt;p&gt;最近工作需要，开始做了一些动态画图的活儿，顺便记录一下。&lt;/p&gt;

&lt;p&gt;主要分为三个部分，1. 画路径 2. 加Layer 3.设置动画。 如果不需要动画，直接skip last step.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;CGMutablePath&lt;/strong&gt; 
通过CGMutablePath来定义想要画画的路径 &lt;a href=&quot;https://developer.apple.com/reference/coregraphics/cgmutablepath&quot;&gt;Apple Doc&lt;/a&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;swift func move(to point: CGPoint, transform: CGAffineTransform = default)&lt;/code&gt;
  把当前画笔的点挪到指定的点&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;swift func addLine(to point: CGPoint, transform: CGAffineTransform = default)&lt;/code&gt;
  从当点的点，到指定的点，画一个线&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;swift func addRect(_ rect: CGRect, transform: CGAffineTransform = default)&lt;/code&gt;
  从当前点开始，画一个给定的矩形&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;swift func addArc(center: CGPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: Bool, transform: CGAffineTransform = default)&lt;/code&gt;
  最复杂的一个，如果需要画rounded corner的时候，必须要用。注意第一个参数是圆形的圆心，&lt;code class=&quot;highlighter-rouge&quot;&gt;startAngle&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;endAngle&lt;/code&gt;是pai的相对值，如图所示:
  &lt;img src=&quot;/assets/images/draw-angle-diagram.png&quot; alt=&quot;角度计算&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;CAShapeLayer&lt;/strong&gt;
Layer，告诉UIView如何显示。&lt;a href=&quot;https://developer.apple.com/reference/quartzcore/cashapelayer&quot;&gt;Apple Doc&lt;/a&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;swift var fillColor: CGColor? { get set }&lt;/code&gt;
  填充的颜色&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;swift var strokeColor: CGColor? { get set }&lt;/code&gt;
  画的颜色&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;swift var path: CGPath? { get set }&lt;/code&gt;
  画的路径，&lt;strong&gt;CGMutablePath&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;swift var strokeEnd: CGFloat { get set }&lt;/code&gt;
  注意，如果设置为0，是不画的，如果需要第三部，动画效果，要先设置成0，否则1就可以&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;swift func add(_ anim: CAAnimation, 
forKey key: String?)&lt;/code&gt;
 如果需要动画效果，需要call这个方法，key很关键，不能重复&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;CABasicAnimation&lt;/strong&gt; 动画定义 &lt;a href=&quot;https://developer.apple.com/reference/quartzcore/cabasicanimation&quot;&gt;Apple Doc&lt;/a&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;swift convenience init(keyPath path: String?)&lt;/code&gt;
  此时的&lt;strong&gt;keyPath&lt;/strong&gt; value如果不正确，是没有动画效果的，如果是画线，可以用&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;strokeEnd&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;swift animation.timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)&lt;/code&gt; 加入合适的时间方法&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;源代码在&lt;a href=&quot;https://github.com/zheng-liu-seattle/iOS-animation-demo&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 04 Dec 2016 00:00:00 -0800</pubDate>
        <link>/2016/12/04/draw-animation/</link>
        <guid isPermaLink="true">/2016/12/04/draw-animation/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>一个小程序猿的梦想</title>
        <description>&lt;p&gt;曾几何时，做为程序猿的我，也曾经有过梦想，有过去实现这个梦想的激情。&lt;/p&gt;

&lt;p&gt;每个程序员肯定都有梦想，什么bug-free code，pm都去死，或者startup，但是我的梦想很简单很实际，就是利用业余的时间，做一些app，符合以下要求:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;自己需要的&lt;/li&gt;
  &lt;li&gt;市面上没有，或者死贵的&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;仅此而已，其实真的很简单。&lt;/p&gt;

&lt;p&gt;自从2009年踏上iOS的贼船，陆陆续续做过一些iOS的app，包括第一个在ipad上的画画app，在ios上可以随便听歌下载歌曲（只是cache）的mp3 app，没有pm，没有designer，都是自己觉得需要，就做了。&lt;/p&gt;

&lt;p&gt;随着weibo的兴起，我也是刷weibo一族，手机刷完，网页刷，但是总觉得差点什么，对，desktop app。当时，mac上weibo有官方的app，是用Adobe Air做的，一个cheap的公司，做的app注定也是cheap的，除此之外，还有几个不火的native应用，但是都不符合我的要求，于是开始了做WeiLark之旅。&lt;/p&gt;

&lt;p&gt;最开始从0到1，是和我的好兄弟一起做的，当他听到我的idea的时候，一拍即合，这是我做的第一个mac app，我俩都是非著名码农，但是很快就做出了第一个版本。这个app曾经在App Store China mainland 区常年排在免费排行榜的前几名。&lt;/p&gt;

&lt;p&gt;由此可见，梦想很简单，做自己想要的，需要的，然后大家一起用，不挣一分钱，不出一丝名。关于这个app，虽然回首看code，简直忍无可忍，但是是我目前做过的最happpy的一个app，因为我不是一个人在战斗，有时候，真的很想他，不知道他怎么样了，虽然我们此时的距离不超过一英里。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/weilark.jpg&quot; alt=&quot;WeiLark&quot; /&gt;&lt;/p&gt;

&lt;p&gt;曾经的梦想，已经远去了好久，是时候追回来了。&lt;/p&gt;

&lt;p&gt;Follow your passion.&lt;/p&gt;

</description>
        <pubDate>Sun, 27 Nov 2016 00:00:00 -0800</pubDate>
        <link>/2016/11/27/sde-dream/</link>
        <guid isPermaLink="true">/2016/11/27/sde-dream/</guid>
        
        
        <category>Life</category>
        
      </item>
    
      <item>
        <title>北京 - 雪</title>
        <description>&lt;p&gt;北京，又下雪了。&lt;/p&gt;

&lt;p&gt;其实，有高原红的我，本来是不喜欢雪的，因为这意味着我的大脸又要红扑扑的了。但是我却是一直盼望下雪，因为，下雪就可以不上体育课了，一个胖子的心声，估计大多人都不懂。&lt;/p&gt;

&lt;p&gt;出国十年，每次看到北京初雪的照片，都分外想家，想故宫的角楼，想鼓楼的钟楼，想冬天里的糖葫芦，只有看照片解馋。&lt;/p&gt;

&lt;p&gt;想北京了。&lt;/p&gt;
</description>
        <pubDate>Tue, 22 Nov 2016 00:00:00 -0800</pubDate>
        <link>/2016/11/22/beijing-snow/</link>
        <guid isPermaLink="true">/2016/11/22/beijing-snow/</guid>
        
        
        <category>Life</category>
        
      </item>
    
      <item>
        <title>时间</title>
        <description>&lt;p&gt;TBD&lt;/p&gt;
</description>
        <pubDate>Sun, 20 Nov 2016 00:00:00 -0800</pubDate>
        <link>/2016/11/20/tldr/</link>
        <guid isPermaLink="true">/2016/11/20/tldr/</guid>
        
        
        <category>Life</category>
        
      </item>
    
      <item>
        <title>时间</title>
        <description>&lt;p&gt;年轻的时候，总是以自己每天只需要睡6个小时而沾沾自喜，因为跟正常人的8-10个小时睡眠比起来，我一周比别人多半天，可以做很多很多事情。&lt;/p&gt;

&lt;p&gt;有了孩子，买了house，加入了start up，才慢慢意识到，时间，并不是一切，如果不把时间用到合适的地方，再多的时间，也没有用，只会让自己徒有那种&lt;strong&gt;忙&lt;/strong&gt;的满足感，但是并没有使自己有任何进步。&lt;/p&gt;

&lt;p&gt;当有时间的时候，是打游戏，还是收拾屋子，还是陪孩子，还是看会工作的书，或者加班？我相信，不管时间是不是碎片，只要用到正确的地方，总会量变引起质变的。&lt;/p&gt;

&lt;p&gt;希望越来越老的我，不再浪费时间。&lt;/p&gt;
</description>
        <pubDate>Sat, 19 Nov 2016 00:00:00 -0800</pubDate>
        <link>/2016/11/19/value-time/</link>
        <guid isPermaLink="true">/2016/11/19/value-time/</guid>
        
        
        <category>Life</category>
        
      </item>
    
      <item>
        <title>Hello World</title>
        <description>&lt;h3 id=&quot;hello-github-pages&quot;&gt;Hello GitHub Pages&lt;/h3&gt;

&lt;p&gt;受不了之前的host provider，不停的down机，终于换成了github pages，等有空慢慢把以前的内容搬过来，第一篇，先这样了，生活总是很忙。&lt;/p&gt;

</description>
        <pubDate>Sun, 13 Nov 2016 00:00:00 -0800</pubDate>
        <link>/2016/11/13/hello-world/</link>
        <guid isPermaLink="true">/2016/11/13/hello-world/</guid>
        
        
        <category>Life</category>
        
      </item>
    
  </channel>
</rss>
